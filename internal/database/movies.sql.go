// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: movies.sql

package database

import (
	"context"
)

const getMovies = `-- name: GetMovies :many
SELECT id, created_at, updated_at, title, tmdb_url, poster_path, status FROM movies
`

func (q *Queries) GetMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.TmdbUrl,
			&i.PosterPath,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMovie = `-- name: InsertMovie :one
INSERT INTO movies (id, created_at, updated_at, title, tmdb_url, poster_path, status )
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, created_at, updated_at, title, tmdb_url, poster_path, status
`

type InsertMovieParams struct {
	ID         int64
	CreatedAt  string
	UpdatedAt  string
	Title      string
	TmdbUrl    string
	PosterPath string
	Status     string
}

func (q *Queries) InsertMovie(ctx context.Context, arg InsertMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, insertMovie,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.TmdbUrl,
		arg.PosterPath,
		arg.Status,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.TmdbUrl,
		&i.PosterPath,
		&i.Status,
	)
	return i, err
}
