// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: votes.sql

package database

import (
	"context"
	"database/sql"
)

const createVote = `-- name: CreateVote :one
INSERT INTO votes (id, created_at, user_id, movie_id)
VALUES (?, ?, ?, ?)
RETURNING id, created_at, user_id, movie_id
`

type CreateVoteParams struct {
	ID        int64
	CreatedAt int64
	UserID    int64
	MovieID   int64
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, createVote,
		arg.ID,
		arg.CreatedAt,
		arg.UserID,
		arg.MovieID,
	)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.MovieID,
	)
	return i, err
}

const getMoviesByUserVotes = `-- name: GetMoviesByUserVotes :many
SELECT m.id, m.created_at, m.updated_at, m.title, m.tmdb_url, m.poster_path, m.status
FROM movies m
INNER JOIN votes v on m.id = v.movie_id
WHERE v.user_id = ?
`

func (q *Queries) GetMoviesByUserVotes(ctx context.Context, userID int64) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMoviesByUserVotes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.TmdbUrl,
			&i.PosterPath,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByMoveisVoted = `-- name: GetUsersByMoveisVoted :many
SELECT u.username
FROM users u
INNER JOIN votes v on u.id = v.user_id
WHERE v.movie_id = ?
`

func (q *Queries) GetUsersByMoveisVoted(ctx context.Context, movieID int64) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByMoveisVoted, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var username sql.NullString
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
